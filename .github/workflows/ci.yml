name: NumericalRecipesFortran CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ] 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Fortran compiler
        if: runner.os == 'Windows'
        run: |
          choco install msys2 --yes
          choco install gcc --yes
          pip install meson ninja
          echo "C:\Program Files (x86)\mingw-w64\bin" >> $GITHUB_PATH

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y gfortran ninja-build python3-pip doxygen
            sudo apt-get install -y lconv
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install gcc ninja python doxygen
          else
            echo "runner not supported"
          fi
          pip install meson

      - name: Print environment diagnostics
        run: |
          echo "PATH=$PATH"
          which ld

      - name: Set gfortran version explicitly (macos)
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            export FC=$(brew --prefix)/bin/gfortran-14
            echo "FC=$FC"
            echo "[binaries]" > gfortran.ini
            echo "fortran = '${FC}'">> gfortran.ini
          fi
        shell: bash
          
      - name: Configure project with Meson
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            meson setup --native-file=gfortran.ini builddir
          elif [[ "$RUNNER_OS" == 'Linux' ]]; then
            meson setup --buildtype=debug builddir
          else
            meson setup --buildtype=release builddir 
          fi
        shell: bash

      - name: Compile
        run: meson compile -C builddir
        shell: bash

      - name: Run tests
        run: meson test -C builddir --print-errorlogs
        shell: bash
          
      - name: Generate test coverage report (Linux)
        run: |
          if [[ "$RUNNER_OS" == 'Linux' ]]; then
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file --output-file coverage.cleaned.info
            genhtml coverage.cleaned.info --output-directory coverage-report
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.cleaned.info
          token: ${{ secrets.CODECOV_TOKEN }}
            lcov --remove coverage.info '/usr
